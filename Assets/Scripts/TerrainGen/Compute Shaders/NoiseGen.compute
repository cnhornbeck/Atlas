#pragma kernel GetVertices
#pragma kernel GetColorValues

#include "FastNoise.hlsl"

// Static constants that don't change once set
cbuffer StaticPerChunkConstants : register(b0)
{
    // Mesh Parameters
    float worldSpaceChunkSize;
    int meshLengthInVertices;
    int heightMultiplier;

    // Noise Parameters
    int seed;
    float frequency;
    int octaves;
    float lacunarity;
    float persistence;

    // Texture Parameters
    int textureWidth;
};

// Dynamic constants that change between dispatches
float worldSpaceChunkCenterX;
float worldSpaceChunkCenterZ;

// Buffers and Textures
RWStructuredBuffer<float3> vertices;
RWTexture2D<float4> outputTexture;
Texture2D<float4> colorLookupTexture;

// Compute Shader for generating vertex values
[numthreads(1024, 1, 1)]
void GetVertices (uint3 id : SV_DispatchThreadID)
{
    FNSetSeed(seed);
    FNSetNoiseType(3);
    FNSetFractalType(0);
    FNSetFrequency(frequency);
    FNSetFractalOctaves(octaves);
    FNSetFractalLacunarity(lacunarity);
    FNSetFractalGain(persistence);
    
    float stepSize = worldSpaceChunkSize / (meshLengthInVertices - 1);
    float initialCoord = -worldSpaceChunkSize / 2 + worldSpaceChunkCenterX;
    float zPosInitialCoord = -worldSpaceChunkSize / 2 + worldSpaceChunkCenterZ;

    float xPos = initialCoord + (id.x % meshLengthInVertices) * stepSize;
    float zPos = zPosInitialCoord + (id.x / meshLengthInVertices) * stepSize;

    vertices[id.x] = float3(xPos - worldSpaceChunkCenterX, ((FNGetNoise(xPos, zPos) + 1) / 2) * heightMultiplier, zPos - worldSpaceChunkCenterZ);
    // vertices[id.x] = float3(worldSpaceChunkSize, worldSpaceChunkSize, worldSpaceChunkSize);
}

// Compute Shader for generating color values
[numthreads(8, 8, 1)]
void GetColorValues (uint3 id : SV_DispatchThreadID)
{
    uint index = 1 * (id.x + id.y * meshLengthInVertices);

    float summedHeight =
        vertices[index].y +
        vertices[index + 1].y +
        vertices[index + 1 * meshLengthInVertices].y +
        vertices[index + 1 * (meshLengthInVertices + 1)].y;

    float smoothedHeight = summedHeight / (4 * heightMultiplier);

    float3 texCoord = float3(smoothedHeight * textureWidth, 0.5, 0);
    float4 color = colorLookupTexture.Load(texCoord);

    outputTexture[id.xy] = color;
}
